type Query {
    hello: String!
    getPerson(name: String, age: Int): String
    getInt(age: Int!): Int
    getFloat(price: Float): Float
    getString: String
    getBoolean: Boolean
    getID: ID
    getNumbers(numbers: [Int!]!): [Int]
    product (id:ID!): Product
    products: [Product!]!
    category(id:ID!): Category
}

type Mutation {
    login(email: EmailAddress!, password: String!): AuthResponse
    addProduct(dto: addProductDTO!): Product
    updateProduct(id: ID!,dto: updateProductDTO!): Product
    deleteProduct(id: ID!): ID
    addCategory(dto: addCategoryDTO!): Category
}

input addCategoryDTO {
    name: CategoryNameType!
    image: URL!
}

input addProductDTO {
    name: String!
    price: Float!
    description: String!
    image: String!
    categoryId: ID!
}

input updateProductDTO {
    name: String
    price: Float
    description: String
    image: String
}

type Product {
    id: ID!
    name: String!
    price: Float!
    description: String!
    image: String!
    createdAt: String!
    categoryId: ID!,
    category: Category!
}

type Category {
    id: ID!
    name: String!
    image: String!
    products: [Product!]!
}

type AuthResponse {
    access_token: String!
    user: User
}

type User {
    id: ID!
    email: String!
    role: String!
    createdAt: String!
}

scalar CategoryNameType